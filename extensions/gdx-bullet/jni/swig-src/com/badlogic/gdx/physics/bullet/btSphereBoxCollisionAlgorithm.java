/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.badlogic.gdx.physics.bullet;

import com.badlogic.gdx.utils.SharedLibraryLoader;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Matrix3;

public class btSphereBoxCollisionAlgorithm extends btActivatingCollisionAlgorithm {
  private long swigCPtr;

  public btSphereBoxCollisionAlgorithm(long cPtr, boolean cMemoryOwn) {
    super(gdxBulletJNI.btSphereBoxCollisionAlgorithm_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(btSphereBoxCollisionAlgorithm obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gdxBulletJNI.delete_btSphereBoxCollisionAlgorithm(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static {
    new SharedLibraryLoader().load("gdx-bullet");
  }

  public btSphereBoxCollisionAlgorithm(btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObject col0, btCollisionObject col1, boolean isSwapped) {
    this(gdxBulletJNI.new_btSphereBoxCollisionAlgorithm(btPersistentManifold.getCPtr(mf), mf, btCollisionAlgorithmConstructionInfo.getCPtr(ci), ci, btCollisionObject.getCPtr(col0), col0, btCollisionObject.getCPtr(col1), col1, isSwapped), true);
  }

  public float getSphereDistance(btCollisionObject boxObj, Vector3 v3PointOnBox, Vector3 v3PointOnSphere, Vector3 v3SphereCenter, float fRadius) {
    return gdxBulletJNI.btSphereBoxCollisionAlgorithm_getSphereDistance(swigCPtr, this, btCollisionObject.getCPtr(boxObj), boxObj, v3PointOnBox, v3PointOnSphere, v3SphereCenter, fRadius);
  }

  public float getSpherePenetration(btCollisionObject boxObj, Vector3 v3PointOnBox, Vector3 v3PointOnSphere, Vector3 v3SphereCenter, float fRadius, Vector3 aabbMin, Vector3 aabbMax) {
    return gdxBulletJNI.btSphereBoxCollisionAlgorithm_getSpherePenetration(swigCPtr, this, btCollisionObject.getCPtr(boxObj), boxObj, v3PointOnBox, v3PointOnSphere, v3SphereCenter, fRadius, aabbMin, aabbMax);
  }

}
