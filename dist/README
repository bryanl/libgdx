-- libgdx 0.1 --
Hi there, you seem to have downloaded libgdx 0.1 so let me explain to you how to setup your projects. 
The following assumes that you are going the proper libgdx way, that is developing your app on the 
Desktop and then painlessly droping it on your Android device without any further code modifications. 
We go through this step by step.

1) Setting up the desktop Java project
Open Eclipse and create a new Java project called gdx-helloworld. Within the project create a new 
folder called "libs/" and drop files of this zip file into it. In the package explorer you should then 
have something like this:

gdx-helloworld
 -> src/
 -> JRE System Library
 -> libs/
    -> armeabi/
       - >libgdx.so
    -> gdx-0.11.jar
    -> gdx.dll
    -> gluegen-rt-1.0b5.jar
    -> jogl-1.1.1.jar
    -> jogl-natives-1.1.1.jar
    -> libgdx.so
    -> README
    
Next right click on the the gdx-helloworld project in the package explorer and select properties. Select 
"Java Build Path" to the left in the new dialog and then click the Libraries tab. In the libraries tab 
click Add Libaries, browse to the gdx-helloworld/libs folder and select all the Jar-files. Now you have 
added all that's needed for the Java project to compile. 

Create a new package in the "src/" folder of the gdx-helloworld project, say "com.badlogic.helloworld" 
and create a new class called "HelloWorld" in this package. Here's the source to put into this class:

=========== CODE ===========
import com.badlogic.gdx.Application;
import com.badlogic.gdx.RenderListener;
import com.badlogic.gdx.backends.jogl.JoglApplication;


public class HelloWorld implements RenderListener 
{
	public static void main( String[] argv )
	{
		JoglApplication app = new JoglApplication( "Hello World", 480, 320 );
		app.addRenderListener( new HelloWorld() );
	}

	@Override
	public void setup(Application arg0) 
	{	
		
	}
	
	@Override
	public void render(Application arg0) 
	{	
		
	}
	

	@Override
	public void dispose(Application arg0) 
	{	
		
	}
}
=========== CODE ===========

That's the most basic gdx app you can write. To start this app create a new run configuration 
with the VM arguments -Djava.library.path=libs/. If you omit this you will get an UnsatisfiedLinkError 
as the libgdx.so/gdx.dll shared libraries can not be found by the VM otherwise. If you run the
example you will see a black screen. Congratulations, you just wrote your first gdx app!

2) Setting up the Android project
Now we want the above HelloWorld class to run on Android. For this we create a new Android project
and call it let's say gdx-helloworld-android. Specify Android 1.5 as the target platform.
As an activity name chose for example GDXHelloWorld.
 
Also copy over the contents of this zip file to a folder called "libs/" in your Android project. Here's 
how your android project should look like now:

gdx-helloworld-android
 -> src/
    -> com.badlogic.gdx/
       -> GDXHelloWorld.java
 -> gen/
 -> Android 1.5
 -> assets/
 -> libs/
    -> armeabi/
       -> libgdx.so
    -> gdx-0.11.jar
    -> gdx.dll
    -> gluegen-rt-1.0b5.jar
    -> jogl-1.1.1.jar
    -> jogl-natives-1.1.1.jar
    -> libgdx.so
    -> README
 -> res/
 -> AndroidManifset.xml
 -> default.properties
 
 Go to the properties of the Android project and select "Java Build Path" again. Add the gdx-helloworld 
project in the project tab and the gdx-0.11.jar in the Libraries tab. You don't have to add the other
jars as those are only needed for the desktop Java version. 

Now open the GDXHelloWorld.java file and paste the following code in:

=========== CODE ===========
package com.badlogic.gdx;

import android.os.Bundle;

import com.badlogic.gdx.backends.android.AndroidApplication;
import com.badlogic.gdx.helloworld.HelloWorld;

public class GDXHelloWorld extends AndroidApplication
{	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);        
        addRenderListener( new HelloWorld() );
    }
}
=========== CODE ===========  
 
Now we are almost ready to start the thing on the device. Open the AndroidManifest.xml and add 

android:configChanges="keyboard|keyboardHidden|orientation"

to the <activity> tag. Your manifest should look something like this then:

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
      package="com.badlogic.gdx"
      android:versionCode="1"
      android:versionName="1.0">
    <application android:icon="@drawable/icon" android:label="@string/app_name">
        <activity android:name=".GDXHelloWorld"
                  android:label="@string/app_name"
                  android:configChanges="keyboard|keyboardHidden|orientation">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>
    <uses-sdk android:minSdkVersion="3" />

</manifest> 

Now you can start the Activity as you do with any normal android application in eclipse. Et voila, profit!

You can savely remove all jar files != gdx-0.11.jar from the libs/ folder of the android project. The gdx.dll
and the libgdx.so file can also be deleted. However, do not delete the libgdx.so file in the folder libs/armeabi/!
It is the native code for Android of libgdx. 

You never have to change the android project again unless you add assets. The rest is done in the Java project.
Just verify that it works on the device every now and then starting the Activity of the android project.

You can download both demo projects from completely setup (minus the run configurations) at http://libgdx.googlecode.com/files/gdx-helloworld.zip

Have fun!