/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package com.badlogic.gdx;

import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.GL11;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.GLCommon;
import com.badlogic.gdx.graphics.GLU;
import com.badlogic.gdx.graphics.Mesh;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.FrameBuffer;
import com.badlogic.gdx.graphics.glutils.IndexBufferObject;
import com.badlogic.gdx.graphics.glutils.ShaderProgram;
import com.badlogic.gdx.graphics.glutils.VertexArray;
import com.badlogic.gdx.graphics.glutils.VertexBufferObject;

/**
 * <p>
 * This interface encapsulates the communication with the graphics processor. It allows to retrieve {@link GL10}, {@link GL11} and
 * {@link GL20} instances depending on the available hardware and configuration of the {@link Application}. Additionally it
 * features methods to generate {@link Pixmap}s and {@link Texture}s.
 * </p>
 * 
 * <p>
 * {@link Texture}s can be either managed or not managed. Managed and Textures will be restored when the OpenGL context is lost.
 * An OpenGL ES context loss happens when a user pauses the Application ( {@link ApplicationListener#pause()}) and switches to
 * another application on Android. On the desktop there is no concept of context loss for OpenGL.
 * </p>
 * 
 * <p>
 * There are many more utility classes that are not directly generated by the {@link Graphics} interfaces. See {@link VertexArray}, {@link VertexBufferObject}, {@link IndexBufferObject}, {@link Mesh}, {@link ShaderProgram} and {@link FrameBuffer},
 * {@link BitmapFont}, {@link SpriteBatch} and so on. All these classes are managed, meaning they don't need to be reloaded on a
 * context loss. Explore the com.badlogic.gdx.graphics package for more classes that might come in handy.
 * </p>
 * 
 * <p>
 * All graphical resources, be the generated by the {@link Graphics} interface or via a constructor <b>must</b> be disposed when
 * no longer used!
 * </p>
 * 
 * @author mzechner
 * 
 */
public interface Graphics {
	/**
	 * Enumeration describing different types of {@link Graphics} implementations.
	 * 
	 * @author mzechner
	 * 
	 */
	public enum GraphicsType {
		AndroidGL, JoglGL, LWJGL, Angle
	}

	/**
	 * Returns whether OpenGL ES 1.1 is available. If it is you can get an instance of {@link GL11} via {@link #getGL11()} to
	 * access OpenGL ES 1.1 functionality. This also implies that {@link #getGL10()} will return an instance.
	 * 
	 * @return whether OpenGL ES 1.1 is available
	 */
	public boolean isGL11Available ();

	/**
	 * Returns whether OpenGL ES 2.0 is available. If it is you can get an instance of {@link GL20} via {@link #getGL20()} to
	 * access OpenGL ES 2.0 functionality. Note that this functionality will only be available if you instructed the
	 * {@link Application} instance to use OpenGL ES 2.0!
	 * 
	 * @return whether OpenGL ES 2.0 is available
	 */
	public boolean isGL20Available ();

	/**
	 * @return a {@link GLCommon} instance
	 */
	public GLCommon getGLCommon ();

	/**
	 * @return the {@link GL10} instance or null if not supported
	 */
	public GL10 getGL10 ();

	/**
	 * @return the {@link GL11} instance or null if not supported
	 */
	public GL11 getGL11 ();

	/**
	 * @return the {@link GL20} instance or null if not supported
	 */
	public GL20 getGL20 ();

	/**
	 * @return the {@link GLU} instance
	 */
	public GLU getGLU();
	
	/**
	 * @return the width in pixels of the display surface
	 */
	public int getWidth ();

	/**
	 * @return the height in pixels of the display surface
	 */
	public int getHeight ();

	/**
	 * @return the time span between the current frame and the last frame in seconds
	 */
	public float getDeltaTime ();

	/**
	 * @return the average number of frames per second
	 */
	public int getFramesPerSecond ();

	/**
	 * @return the {@link GraphicsType} of this Graphics instance
	 */
	public GraphicsType getType ();

	/**
	 * @return the pixels per inch on the x-axis
	 */
	public float getPpiX ();

	/**
	 * @return the pixels per inch on the y-axis
	 */
	public float getPpiY ();

	/**
	 * @return the pixels per centimeter on the x-axis
	 */
	public float getPpcX ();

	/**
	 * @return the pixels per centimeter on the y-axis.
	 */
	public float getPpcY ();		
}
