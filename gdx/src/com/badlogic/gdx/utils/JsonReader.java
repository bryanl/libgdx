
// line 1 "JsonReader.rl"
// Do not edit this file! Generated by Ragel.
// Ragel.exe -G2 -J -o JsonReader.java JsonReader.rl
/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package com.badlogic.gdx.utils;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import com.badlogic.gdx.files.FileHandle;

/** Lightweight JSON parser.<br>
 * <br>
 * The default behavior is to parse the JSON into a DOM made up of {@link ObjectMap}, {@link Array}, String, Float, and Boolean objects.
 * Extend this class and override methods to perform event driven parsing. When this is done, the parse methods will return null.
 * @author Nathan Sweet */
public class JsonReader {
	public Object parse (String json) {
		char[] data = json.toCharArray();
		return parse(data, 0, data.length);
	}

	public Object parse (Reader reader) {
		try {
			char[] data = new char[1024];
			int offset = 0;
			while (true) {
				int length = reader.read(data, offset, data.length - offset);
				if (length == -1) break;
				if (length == 0) {
					char[] newData = new char[data.length * 2];
					System.arraycopy(data, 0, newData, 0, data.length);
					data = newData;
				} else
					offset += length;
			}
			return parse(data, 0, offset);
		} catch (IOException ex) {
			throw new SerializationException(ex);
		}
	}

	public Object parse (InputStream input) {
		try {
			return parse(new InputStreamReader(input, "ISO-8859-1"));
		} catch (IOException ex) {
			throw new SerializationException(ex);
		}
	}

	public Object parse (FileHandle file) {
		return parse(file.read());
	}

	public Object parse (char[] data, int offset, int length) {
		int cs, p = offset, pe = length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		Array<String> names = new Array(8);
		boolean needsUnescape = false;
		RuntimeException parseRuntimeEx = null;

		boolean debug = false;
		if (debug) System.out.println();

		try {
		
// line 3 "JsonReader.java"
	{
	cs = json_start;
	top = 0;
	}

// line 8 "JsonReader.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _json_key_offsets[cs];
	_trans = _json_index_offsets[cs];
	_klen = _json_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _json_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _json_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _json_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _json_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _json_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	cs = _json_trans_targs[_trans];

	if ( _json_trans_actions[_trans] != 0 ) {
		_acts = _json_trans_actions[_trans];
		_nacts = (int) _json_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _json_actions[_acts++] )
			{
	case 0:
// line 95 "JsonReader.rl"
	{
				s = p;
				needsUnescape = false;
			}
	break;
	case 1:
// line 99 "JsonReader.rl"
	{
				needsUnescape = true;
			}
	break;
	case 2:
// line 102 "JsonReader.rl"
	{
				String name = new String(data, s, p - s);
				s = p;
				if (needsUnescape) name = unescape(name);
				if (debug) System.out.println("name: " + name);
				names.add(name);
			}
	break;
	case 3:
// line 109 "JsonReader.rl"
	{
				String value = new String(data, s, p - s);
				s = p;
				if (needsUnescape) value = unescape(value);
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("string: " + name + "=" + value);
				string(name, value);
			}
	break;
	case 4:
// line 117 "JsonReader.rl"
	{
				String value = new String(data, s, p - s);
				s = p;
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("number: " + name + "=" + Float.parseFloat(value));
				number(name, Float.parseFloat(value));
			}
	break;
	case 5:
// line 124 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("boolean: " + name + "=true");
				bool(name, true);
			}
	break;
	case 6:
// line 129 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("boolean: " + name + "=false");
				bool(name, false);
			}
	break;
	case 7:
// line 134 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("null: " + name);
				string(name, null);
			}
	break;
	case 8:
// line 139 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("startObject: " + name);
				startObject(name);
				{
				if (top == stack.length) {
					int[] newStack = new int[stack.length * 2];
					System.arraycopy(stack, 0, newStack, 0, stack.length);
					stack = newStack;
				}
			{stack[top++] = cs; cs = 8; _goto_targ = 2; if (true) continue _goto;}}
			}
	break;
	case 9:
// line 145 "JsonReader.rl"
	{
				if (debug) System.out.println("endObject");
				pop();
				{cs = stack[--top];_goto_targ = 2; if (true) continue _goto;}
			}
	break;
	case 10:
// line 150 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("startArray: " + name);
				startArray(name);
				{
				if (top == stack.length) {
					int[] newStack = new int[stack.length * 2];
					System.arraycopy(stack, 0, newStack, 0, stack.length);
					stack = newStack;
				}
			{stack[top++] = cs; cs = 42; _goto_targ = 2; if (true) continue _goto;}}
			}
	break;
	case 11:
// line 156 "JsonReader.rl"
	{
				if (debug) System.out.println("endArray");
				pop();
				{cs = stack[--top];_goto_targ = 2; if (true) continue _goto;}
			}
	break;
// line 201 "JsonReader.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _json_eof_actions[cs];
	int __nacts = (int) _json_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _json_actions[__acts++] ) {
	case 3:
// line 109 "JsonReader.rl"
	{
				String value = new String(data, s, p - s);
				s = p;
				if (needsUnescape) value = unescape(value);
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("string: " + name + "=" + value);
				string(name, value);
			}
	break;
	case 4:
// line 117 "JsonReader.rl"
	{
				String value = new String(data, s, p - s);
				s = p;
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("number: " + name + "=" + Float.parseFloat(value));
				number(name, Float.parseFloat(value));
			}
	break;
	case 5:
// line 124 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("boolean: " + name + "=true");
				bool(name, true);
			}
	break;
	case 6:
// line 129 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("boolean: " + name + "=false");
				bool(name, false);
			}
	break;
	case 7:
// line 134 "JsonReader.rl"
	{
				String name = names.size > 0 ? names.pop() : null;
				if (debug) System.out.println("null: " + name);
				string(name, null);
			}
	break;
// line 267 "JsonReader.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 185 "JsonReader.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			int lineNumber = 1;
			for (int i = 0; i < p; i++)
				if (data[i] == '\n') lineNumber++;
			throw new IllegalArgumentException("Error parsing JSON on line " + lineNumber + " near: " + new String(data, p, pe - p), parseRuntimeEx);
		} else if (elements.size != 0) {
			Object element = elements.peek();
			elements.clear();
			if (element instanceof ObjectMap)
				throw new IllegalArgumentException("Error parsing JSON, unmatched brace.");
			else
				throw new IllegalArgumentException("Error parsing JSON, unmatched bracket.");
		}
		Object root = this.root;
		this.root = null;
		return root;
	}

	
// line 277 "JsonReader.java"
private static byte[] init__json_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    8,    1,    9,    1,   10,    1,   11,    2,    0,    2,    2,    0,
	    3,    2,    3,    5,    2,    3,    6,    2,    3,    7,    2,    3,
	    9,    2,    3,   11,    2,    4,    9,    2,    4,   11,    3,    3,
	    5,    9,    3,    3,    5,   11,    3,    3,    6,    9,    3,    3,
	    6,   11,    3,    3,    7,    9,    3,    3,    7,   11
	};
}

private static final byte _json_actions[] = init__json_actions_0();


private static short[] init__json_key_offsets_0()
{
	return new short [] {
	    0,    0,   18,   20,   22,   31,   33,   37,   39,   51,   64,   68,
	   86,   98,  103,  115,  117,  119,  128,  130,  132,  141,  155,  163,
	  165,  174,  178,  180,  187,  197,  210,  223,  236,  249,  261,  274,
	  287,  300,  312,  325,  338,  351,  363,  381,  393,  398,  416,  418,
	  420,  429,  443,  451,  453,  462,  466,  468,  475,  485,  498,  511,
	  524,  537,  549,  562,  575,  588,  600,  613,  626,  639,  651,  663,
	  666,  680,  686,  693,  698,  706,  719,  732,  745,  758,  770,  783,
	  796,  809,  821,  834,  847,  860,  872,  872
	};
}

private static final short _json_key_offsets[] = init__json_key_offsets_0();


private static char[] init__json_trans_keys_0()
{
	return new char [] {
	   32,   34,   45,   48,   58,   91,   93,  102,  110,  116,  123,  125,
	    9,   13,   44,   46,   49,   57,   34,   92,   34,   92,   34,   47,
	   92,   98,  102,  110,  114,  116,  117,   48,   57,   43,   45,   48,
	   57,   48,   57,   32,   34,   44,   46,   91,   93,  123,  125,    9,
	   13,   48,   58,   32,   34,   44,   46,   58,   91,   93,  123,  125,
	    9,   13,   48,   57,   32,   58,    9,   13,   32,   34,   45,   48,
	   58,   91,   93,  102,  110,  116,  123,  125,    9,   13,   44,   46,
	   49,   57,   32,   34,   44,   46,   91,   93,  123,  125,    9,   13,
	   48,   58,   32,   44,  125,    9,   13,   32,   34,   44,   46,   91,
	   93,  123,  125,    9,   13,   48,   58,   34,   92,   34,   92,   34,
	   47,   92,   98,  102,  110,  114,  116,  117,   34,   92,   34,   92,
	   34,   47,   92,   98,  102,  110,  114,  116,  117,   32,   34,   44,
	   46,   48,   58,   91,   93,  123,  125,    9,   13,   49,   57,   32,
	   44,   46,   69,  101,  125,    9,   13,   48,   57,   32,   44,   69,
	  101,  125,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,  125,    9,   13,   48,   57,   32,   44,   46,   69,  101,
	  125,    9,   13,   48,   57,   32,   34,   44,   46,   91,   93,   97,
	  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,   93,
	  108,  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,
	   93,  115,  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,
	   91,   93,  101,  123,  125,    9,   13,   48,   58,   32,   34,   44,
	   46,   91,   93,  123,  125,    9,   13,   48,   58,   32,   34,   44,
	   46,   91,   93,  117,  123,  125,    9,   13,   48,   58,   32,   34,
	   44,   46,   91,   93,  108,  123,  125,    9,   13,   48,   58,   32,
	   34,   44,   46,   91,   93,  108,  123,  125,    9,   13,   48,   58,
	   32,   34,   44,   46,   91,   93,  123,  125,    9,   13,   48,   58,
	   32,   34,   44,   46,   91,   93,  114,  123,  125,    9,   13,   48,
	   58,   32,   34,   44,   46,   91,   93,  117,  123,  125,    9,   13,
	   48,   58,   32,   34,   44,   46,   91,   93,  101,  123,  125,    9,
	   13,   48,   58,   32,   34,   44,   46,   91,   93,  123,  125,    9,
	   13,   48,   58,   32,   34,   44,   45,   46,   48,   58,   91,   93,
	  102,  110,  116,  123,  125,    9,   13,   49,   57,   32,   34,   44,
	   46,   91,   93,  123,  125,    9,   13,   48,   58,   32,   44,   93,
	    9,   13,   32,   34,   45,   48,   58,   91,   93,  102,  110,  116,
	  123,  125,    9,   13,   44,   46,   49,   57,   34,   92,   34,   92,
	   34,   47,   92,   98,  102,  110,  114,  116,  117,   32,   34,   44,
	   46,   48,   58,   91,   93,  123,  125,    9,   13,   49,   57,   32,
	   44,   46,   69,   93,  101,    9,   13,   48,   57,   32,   44,   69,
	   93,  101,    9,   13,   48,   57,   43,   45,   48,   57,   48,   57,
	   32,   44,   93,    9,   13,   48,   57,   32,   44,   46,   69,   93,
	  101,    9,   13,   48,   57,   32,   34,   44,   46,   91,   93,   97,
	  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,   93,
	  108,  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,
	   93,  115,  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,
	   91,   93,  101,  123,  125,    9,   13,   48,   58,   32,   34,   44,
	   46,   91,   93,  123,  125,    9,   13,   48,   58,   32,   34,   44,
	   46,   91,   93,  117,  123,  125,    9,   13,   48,   58,   32,   34,
	   44,   46,   91,   93,  108,  123,  125,    9,   13,   48,   58,   32,
	   34,   44,   46,   91,   93,  108,  123,  125,    9,   13,   48,   58,
	   32,   34,   44,   46,   91,   93,  123,  125,    9,   13,   48,   58,
	   32,   34,   44,   46,   91,   93,  114,  123,  125,    9,   13,   48,
	   58,   32,   34,   44,   46,   91,   93,  117,  123,  125,    9,   13,
	   48,   58,   32,   34,   44,   46,   91,   93,  101,  123,  125,    9,
	   13,   48,   58,   32,   34,   44,   46,   91,   93,  123,  125,    9,
	   13,   48,   58,   32,   34,   44,   46,   91,   93,  123,  125,    9,
	   13,   48,   58,   32,    9,   13,   32,   34,   44,   46,   48,   58,
	   91,   93,  123,  125,    9,   13,   49,   57,   32,   46,   69,  101,
	    9,   13,   32,   69,  101,    9,   13,   48,   57,   32,    9,   13,
	   48,   57,   32,   46,   69,  101,    9,   13,   48,   57,   32,   34,
	   44,   46,   91,   93,   97,  123,  125,    9,   13,   48,   58,   32,
	   34,   44,   46,   91,   93,  108,  123,  125,    9,   13,   48,   58,
	   32,   34,   44,   46,   91,   93,  115,  123,  125,    9,   13,   48,
	   58,   32,   34,   44,   46,   91,   93,  101,  123,  125,    9,   13,
	   48,   58,   32,   34,   44,   46,   91,   93,  123,  125,    9,   13,
	   48,   58,   32,   34,   44,   46,   91,   93,  117,  123,  125,    9,
	   13,   48,   58,   32,   34,   44,   46,   91,   93,  108,  123,  125,
	    9,   13,   48,   58,   32,   34,   44,   46,   91,   93,  108,  123,
	  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,   93,  123,
	  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,   93,  114,
	  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,   93,
	  117,  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,   91,
	   93,  101,  123,  125,    9,   13,   48,   58,   32,   34,   44,   46,
	   91,   93,  123,  125,    9,   13,   48,   58,    0
	};
}

private static final char _json_trans_keys[] = init__json_trans_keys_0();


private static byte[] init__json_single_lengths_0()
{
	return new byte [] {
	    0,   12,    2,    2,    7,    0,    2,    0,    8,    9,    2,   12,
	    8,    3,    8,    2,    2,    7,    2,    2,    7,   10,    6,    0,
	    5,    2,    0,    3,    6,    9,    9,    9,    9,    8,    9,    9,
	    9,    8,    9,    9,    9,    8,   14,    8,    3,   12,    2,    2,
	    7,   10,    6,    0,    5,    2,    0,    3,    6,    9,    9,    9,
	    9,    8,    9,    9,    9,    8,    9,    9,    9,    8,    8,    1,
	   10,    4,    3,    1,    4,    9,    9,    9,    9,    8,    9,    9,
	    9,    8,    9,    9,    9,    8,    0,    0
	};
}

private static final byte _json_single_lengths[] = init__json_single_lengths_0();


private static byte[] init__json_range_lengths_0()
{
	return new byte [] {
	    0,    3,    0,    0,    1,    1,    1,    1,    2,    2,    1,    3,
	    2,    1,    2,    0,    0,    1,    0,    0,    1,    2,    1,    1,
	    2,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    1,    3,    0,    0,
	    1,    2,    1,    1,    2,    1,    1,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
	    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    0,    0
	};
}

private static final byte _json_range_lengths[] = init__json_range_lengths_0();


private static short[] init__json_index_offsets_0()
{
	return new short [] {
	    0,    0,   16,   19,   22,   31,   33,   37,   39,   50,   62,   66,
	   82,   93,   98,  109,  112,  115,  124,  127,  130,  139,  152,  160,
	  162,  170,  174,  176,  182,  191,  203,  215,  227,  239,  250,  262,
	  274,  286,  297,  309,  321,  333,  344,  361,  372,  377,  393,  396,
	  399,  408,  421,  429,  431,  439,  443,  445,  451,  460,  472,  484,
	  496,  508,  519,  531,  543,  555,  566,  578,  590,  602,  613,  624,
	  627,  640,  646,  652,  656,  663,  675,  687,  699,  711,  722,  734,
	  746,  758,  769,  781,  793,  805,  816,  817
	};
}

private static final short _json_index_offsets[] = init__json_index_offsets_0();


private static byte[] init__json_trans_targs_0()
{
	return new byte [] {
	    1,    2,   72,   73,    0,   71,    0,   77,   82,   86,   71,    0,
	    1,    0,   76,   70,   71,    4,    3,   71,    4,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    0,   74,    0,    7,    7,   75,
	    0,   75,    0,    8,   15,   14,    0,    0,    0,    0,   90,    8,
	    0,    9,   10,    0,    0,    0,   11,    0,    0,    0,    0,   10,
	    0,    9,   10,   11,   10,    0,   11,   18,   21,   22,    0,   13,
	    0,   29,   34,   38,   13,    0,   11,    0,   28,   12,   13,    0,
	   14,    0,    0,    0,    0,   90,   13,    0,   12,   13,   14,   90,
	   13,    0,   14,   15,    0,    0,    0,    0,    0,   90,   14,    0,
	    9,   10,   17,   16,   10,   17,   16,   16,   16,   16,   16,   16,
	   16,   16,   16,    0,   13,   20,   19,   13,   20,   19,   19,   19,
	   19,   19,   19,   19,   19,   19,    0,   13,    0,   14,    0,   22,
	    0,    0,    0,    0,   90,   13,   28,   12,   13,   14,   23,   25,
	   25,   90,   13,    0,   24,    0,   13,   14,   25,   25,   90,   13,
	   24,    0,   26,   26,   27,    0,   27,    0,   13,   14,   90,   13,
	   27,    0,   13,   14,   23,   25,   25,   90,   13,   28,    0,   13,
	    0,   14,    0,    0,    0,   30,    0,   90,   13,    0,   12,   13,
	    0,   14,    0,    0,    0,   31,    0,   90,   13,    0,   12,   13,
	    0,   14,    0,    0,    0,   32,    0,   90,   13,    0,   12,   13,
	    0,   14,    0,    0,    0,   33,    0,   90,   13,    0,   12,   13,
	    0,   14,    0,    0,    0,    0,   90,   13,    0,   12,   13,    0,
	   14,    0,    0,    0,   35,    0,   90,   13,    0,   12,   13,    0,
	   14,    0,    0,    0,   36,    0,   90,   13,    0,   12,   13,    0,
	   14,    0,    0,    0,   37,    0,   90,   13,    0,   12,   13,    0,
	   14,    0,    0,    0,    0,   90,   13,    0,   12,   13,    0,   14,
	    0,    0,    0,   39,    0,   90,   13,    0,   12,   13,    0,   14,
	    0,    0,    0,   40,    0,   90,   13,    0,   12,   13,    0,   14,
	    0,    0,    0,   41,    0,   90,   13,    0,   12,   13,    0,   14,
	    0,    0,    0,    0,   90,   13,    0,   12,   42,   46,   45,   49,
	    0,   50,    0,   44,   91,   57,   62,   66,   44,    0,   42,   56,
	   43,   44,    0,   45,    0,    0,   91,    0,    0,   44,    0,   43,
	   44,   45,   91,   44,    0,   45,   46,   49,   50,    0,   44,   91,
	   57,   62,   66,   44,    0,   45,    0,   56,   43,   44,   48,   47,
	   44,   48,   47,   47,   47,   47,   47,   47,   47,   47,   47,    0,
	   44,    0,   45,    0,   50,    0,    0,   91,    0,    0,   44,   56,
	   43,   44,   45,   51,   53,   91,   53,   44,    0,   52,    0,   44,
	   45,   53,   91,   53,   44,   52,    0,   54,   54,   55,    0,   55,
	    0,   44,   45,   91,   44,   55,    0,   44,   45,   51,   53,   91,
	   53,   44,   56,    0,   44,    0,   45,    0,    0,   91,   58,    0,
	    0,   44,    0,   43,   44,    0,   45,    0,    0,   91,   59,    0,
	    0,   44,    0,   43,   44,    0,   45,    0,    0,   91,   60,    0,
	    0,   44,    0,   43,   44,    0,   45,    0,    0,   91,   61,    0,
	    0,   44,    0,   43,   44,    0,   45,    0,    0,   91,    0,    0,
	   44,    0,   43,   44,    0,   45,    0,    0,   91,   63,    0,    0,
	   44,    0,   43,   44,    0,   45,    0,    0,   91,   64,    0,    0,
	   44,    0,   43,   44,    0,   45,    0,    0,   91,   65,    0,    0,
	   44,    0,   43,   44,    0,   45,    0,    0,   91,    0,    0,   44,
	    0,   43,   44,    0,   45,    0,    0,   91,   67,    0,    0,   44,
	    0,   43,   44,    0,   45,    0,    0,   91,   68,    0,    0,   44,
	    0,   43,   44,    0,   45,    0,    0,   91,   69,    0,    0,   44,
	    0,   43,   44,    0,   45,    0,    0,   91,    0,    0,   44,    0,
	   43,   71,    0,    0,    0,    0,    0,    0,    0,   71,    0,   70,
	   71,   71,    0,   71,    0,    0,    0,   73,    0,    0,    0,    0,
	    0,   71,   76,   70,   71,    5,    6,    6,   71,    0,   71,    6,
	    6,   71,   74,    0,   71,   71,   75,    0,   71,    5,    6,    6,
	   71,   76,    0,   71,    0,    0,    0,    0,    0,   78,    0,    0,
	   71,    0,   70,   71,    0,    0,    0,    0,    0,   79,    0,    0,
	   71,    0,   70,   71,    0,    0,    0,    0,    0,   80,    0,    0,
	   71,    0,   70,   71,    0,    0,    0,    0,    0,   81,    0,    0,
	   71,    0,   70,   71,    0,    0,    0,    0,    0,    0,    0,   71,
	    0,   70,   71,    0,    0,    0,    0,    0,   83,    0,    0,   71,
	    0,   70,   71,    0,    0,    0,    0,    0,   84,    0,    0,   71,
	    0,   70,   71,    0,    0,    0,    0,    0,   85,    0,    0,   71,
	    0,   70,   71,    0,    0,    0,    0,    0,    0,    0,   71,    0,
	   70,   71,    0,    0,    0,    0,    0,   87,    0,    0,   71,    0,
	   70,   71,    0,    0,    0,    0,    0,   88,    0,    0,   71,    0,
	   70,   71,    0,    0,    0,    0,    0,   89,    0,    0,   71,    0,
	   70,   71,    0,    0,    0,    0,    0,    0,    0,   71,    0,   70,
	    0,    0,    0
	};
}

private static final byte _json_trans_targs[] = init__json_trans_targs_0();


private static byte[] init__json_trans_actions_0()
{
	return new byte [] {
	    0,    0,    1,    1,    0,   15,    0,    1,    1,    1,   11,    0,
	    0,    0,    1,    1,   22,    1,    1,    7,    0,    0,    3,    3,
	    3,    3,    3,    3,    3,    3,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
	    0,    1,    5,    0,    0,    0,    5,    0,    0,    0,    0,    5,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    0,   15,
	    0,    1,    1,    1,   11,    0,    0,    0,    1,    1,    7,    0,
	    7,    0,    0,    0,    0,   34,    7,    0,    0,    0,    0,   13,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
	    1,   19,    1,    1,    5,    0,    0,    3,    3,    3,    3,    3,
	    3,    3,    3,    0,   22,    1,    1,    7,    0,    0,    3,    3,
	    3,    3,    3,    3,    3,    3,    0,    7,    0,    7,    0,    0,
	    0,    0,    0,    0,   34,    7,    0,    0,    9,    9,    0,    0,
	    0,   40,    9,    0,    0,    0,    9,    9,    0,    0,   40,    9,
	    0,    0,    0,    0,    0,    0,    0,    0,    9,    9,   40,    9,
	    0,    0,    9,    9,    0,    0,    0,   40,    9,    0,    0,    7,
	    0,    7,    0,    0,    0,    0,    0,   34,    7,    0,    0,    7,
	    0,    7,    0,    0,    0,    0,    0,   34,    7,    0,    0,    7,
	    0,    7,    0,    0,    0,    0,    0,   34,    7,    0,    0,    7,
	    0,    7,    0,    0,    0,    0,    0,   34,    7,    0,    0,   28,
	    0,   28,    0,    0,    0,    0,   54,   28,    0,    0,    7,    0,
	    7,    0,    0,    0,    0,    0,   34,    7,    0,    0,    7,    0,
	    7,    0,    0,    0,    0,    0,   34,    7,    0,    0,    7,    0,
	    7,    0,    0,    0,    0,    0,   34,    7,    0,    0,   31,    0,
	   31,    0,    0,    0,    0,   62,   31,    0,    0,    7,    0,    7,
	    0,    0,    0,    0,    0,   34,    7,    0,    0,    7,    0,    7,
	    0,    0,    0,    0,    0,   34,    7,    0,    0,    7,    0,    7,
	    0,    0,    0,    0,    0,   34,    7,    0,    0,   25,    0,   25,
	    0,    0,    0,    0,   46,   25,    0,    0,    0,    0,    0,    1,
	    0,    1,    0,   15,   17,    1,    1,    1,   11,    0,    0,    1,
	    1,    7,    0,    7,    0,    0,   37,    0,    0,    7,    0,    0,
	    0,    0,   17,    0,    0,    0,    0,    1,    1,    0,   15,   17,
	    1,    1,    1,   11,    0,    0,    0,    1,    1,   22,    1,    1,
	    7,    0,    0,    3,    3,    3,    3,    3,    3,    3,    3,    0,
	    7,    0,    7,    0,    0,    0,    0,   37,    0,    0,    7,    0,
	    0,    9,    9,    0,    0,   43,    0,    9,    0,    0,    0,    9,
	    9,    0,   43,    0,    9,    0,    0,    0,    0,    0,    0,    0,
	    0,    9,    9,   43,    9,    0,    0,    9,    9,    0,    0,   43,
	    0,    9,    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,
	    0,    7,    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,
	    0,    7,    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,
	    0,    7,    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,
	    0,    7,    0,    0,   28,    0,   28,    0,    0,   58,    0,    0,
	   28,    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,    0,
	    7,    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,    0,
	    7,    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,    0,
	    7,    0,    0,   31,    0,   31,    0,    0,   66,    0,    0,   31,
	    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,    0,    7,
	    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,    0,    7,
	    0,    0,    7,    0,    7,    0,    0,   37,    0,    0,    0,    7,
	    0,    0,   25,    0,   25,    0,    0,   50,    0,    0,   25,    0,
	    0,    7,    0,    0,    0,    0,    0,    0,    0,    7,    0,    0,
	    0,    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    7,    0,    0,    9,    0,    0,    0,    9,    0,    9,    0,
	    0,    9,    0,    0,    9,    9,    0,    0,    9,    0,    0,    0,
	    9,    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
	    7,    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
	    7,    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
	    7,    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
	    7,    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,   28,
	    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    7,
	    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    7,
	    0,    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    7,
	    0,    0,   31,    0,    0,    0,    0,    0,    0,    0,   31,    0,
	    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
	    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
	    0,    7,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
	    0,   25,    0,    0,    0,    0,    0,    0,    0,   25,    0,    0,
	    0,    0,    0
	};
}

private static final byte _json_trans_actions[] = init__json_trans_actions_0();


private static byte[] init__json_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
	    7,    9,    9,    9,    9,    7,    7,    7,    7,   28,    7,    7,
	    7,   31,    7,    7,    7,   25,    0,    0
	};
}

private static final byte _json_eof_actions[] = init__json_eof_actions_0();


static final int json_start = 1;
static final int json_first_final = 70;
static final int json_error = 0;

static final int json_en_object = 8;
static final int json_en_array = 42;
static final int json_en_main = 1;


// line 209 "JsonReader.rl"

	private final Array elements = new Array(8);
	private Object root, current;

	private void set (String name, Object value) {
		if (current instanceof ObjectMap)
			((ObjectMap)current).put(name, value);
		else if (current instanceof Array)
			((Array)current).add(value);
		else
			root = value;
	}

	protected void startObject (String name) {
		ObjectMap value = new ObjectMap();
		if (current != null) set(name, value);
		elements.add(value);
		current = value;
	}

	protected void startArray (String name) {
		Array value = new Array();
		if (current != null) set(name, value);
		elements.add(value);
		current = value;
	}

	protected void pop () {
		root = elements.pop();
		current = elements.size > 0 ? elements.peek() : null;
	}

	protected void string (String name, String value) {
		set(name, value);
	}

	protected void number (String name, float value) {
		set(name, value);
	}

	protected void bool (String name, boolean value) {
		set(name, value);
	}

	private String unescape (String value) {
		int length = value.length();
		StringBuilder buffer = new StringBuilder(length + 16);
		for (int i = 0; i < length;) {
			char c = value.charAt(i++);
			if (c != '\\') {
				buffer.append(c);
				continue;
			}
			if (i == length) break;
			c = value.charAt(i++);
			if (c == 'u') {
				buffer.append(Character.toChars(Integer.parseInt(value.substring(i, i + 4), 16)));
				i += 4;
				continue;
			}
			switch (c) {
			case '"':
			case '\\':
			case '/':
				break;
			case 'b':
				c = '\b';
				break;
			case 'f':
				c = '\f';
				break;
			case 'n':
				c = '\n';
				break;
			case 'r':
				c = '\r';
				break;
			case 't':
				c = '\t';
				break;
			default:
				throw new SerializationException("Illegal escaped character: \\" + c);
			}
			buffer.append(c);
		}
		return buffer.toString();
	}
}
