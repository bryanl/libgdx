// line 1 "JsonReader.rl"
// Do not edit this file! Generated by Ragel.
// Ragel.exe -G2 -J -o JsonReader.java JsonReader.rl
/*******************************************************************************
 * Copyright 2011 See AUTHORS file.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package com.badlogic.gdx.utils;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import com.badlogic.gdx.files.FileHandle;

/** Lightweight JSON parser.<br>
 * <br>
 * The default behavior is to parse the JSON into a DOM made up of {@link ObjectMap}, {@link Array}, String, and Float objects.
 * Extend this class and override methods to perform event driven parsing. When this is done, the parse methods will return null.
 * @author Nathan Sweet */
public class JsonReader {
	public Object parse (String json) {
		char[] data = json.toCharArray();
		return parse(data, 0, data.length);
	}

	public Object parse (Reader reader) throws IOException {
		char[] data = new char[1024];
		int offset = 0;
		while (true) {
			int length = reader.read(data, offset, data.length - offset);
			if (length == -1) break;
			if (length == 0) {
				char[] newData = new char[data.length * 2];
				System.arraycopy(data, 0, newData, 0, data.length);
				data = newData;
			} else
				offset += length;
		}
		return parse(data, 0, offset);
	}

	public Object parse (InputStream input) throws IOException {
		return parse(new InputStreamReader(input, "ISO-8859-1"));
	}

	public Object parse (FileHandle file) throws IOException {
		return parse(file.read());
	}

	public Object parse (char[] data, int offset, int length) {
		int cs, p = 0, pe = data.length, eof = pe, top = 0;
		int[] stack = new int[4];

		int s = 0;
		Array<String> names = new Array(8);
		boolean needsUnescape = false;
		RuntimeException parseRuntimeEx = null;

		boolean debug = false;
		if (debug) System.out.println();

		try {

			// line 3 "JsonReader.java"
			{
				cs = json_start;
				top = 0;
			}

			// line 8 "JsonReader.java"
			{
				int _klen;
				int _trans = 0;
				int _acts;
				int _nacts;
				int _keys;
				int _goto_targ = 0;

				_goto:
				while (true) {
					switch (_goto_targ) {
					case 0:
						if (p == pe) {
							_goto_targ = 4;
							continue _goto;
						}
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
					case 1:
						_match:
						do {
							_keys = _json_key_offsets[cs];
							_trans = _json_index_offsets[cs];
							_klen = _json_single_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + _klen - 1;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + ((_upper - _lower) >> 1);
									if (data[p] < _json_trans_keys[_mid])
										_upper = _mid - 1;
									else if (data[p] > _json_trans_keys[_mid])
										_lower = _mid + 1;
									else {
										_trans += (_mid - _keys);
										break _match;
									}
								}
								_keys += _klen;
								_trans += _klen;
							}

							_klen = _json_range_lengths[cs];
							if (_klen > 0) {
								int _lower = _keys;
								int _mid;
								int _upper = _keys + (_klen << 1) - 2;
								while (true) {
									if (_upper < _lower) break;

									_mid = _lower + (((_upper - _lower) >> 1) & ~1);
									if (data[p] < _json_trans_keys[_mid])
										_upper = _mid - 2;
									else if (data[p] > _json_trans_keys[_mid + 1])
										_lower = _mid + 2;
									else {
										_trans += ((_mid - _keys) >> 1);
										break _match;
									}
								}
								_trans += _klen;
							}
						} while (false);

						cs = _json_trans_targs[_trans];

						if (_json_trans_actions[_trans] != 0) {
							_acts = _json_trans_actions[_trans];
							_nacts = (int)_json_actions[_acts++];
							while (_nacts-- > 0) {
								switch (_json_actions[_acts++]) {
								case 0:
								// line 87 "JsonReader.rl"
								{
									s = p;
									needsUnescape = false;
								}
									break;
								case 1:
								// line 91 "JsonReader.rl"
								{
									needsUnescape = true;
								}
									break;
								case 2:
								// line 94 "JsonReader.rl"
								{
									String name = new String(data, s, p - s);
									s = p;
									if (needsUnescape) name = unescape(name);
									if (debug) System.out.println("name: " + name);
									names.add(name);
								}
									break;
								case 3:
								// line 101 "JsonReader.rl"
								{
									String value = new String(data, s, p - s);
									s = p;
									if (needsUnescape) value = unescape(value);
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("string: " + name + "=" + value);
									string(name, value);
								}
									break;
								case 4:
								// line 109 "JsonReader.rl"
								{
									String value = new String(data, s, p - s);
									s = p;
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("number: " + name + "=" + Float.parseFloat(value));
									number(name, value);
								}
									break;
								case 5:
								// line 116 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("boolean: " + name + "=true");
									bool(name, true);
								}
									break;
								case 6:
								// line 121 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("boolean: " + name + "=false");
									bool(name, false);
								}
									break;
								case 7:
								// line 126 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("null: " + name);
									string(name, null);
								}
									break;
								case 8:
								// line 131 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("startObject: " + name);
									startObject(name);
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 19;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 9:
								// line 137 "JsonReader.rl"
								{
									if (debug) System.out.println("endObject");
									pop();
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								case 10:
								// line 142 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("startArray: " + name);
									startArray(name);
									{
										if (top == stack.length) {
											int[] newStack = new int[stack.length * 2];
											System.arraycopy(stack, 0, newStack, 0, stack.length);
											stack = newStack;
										}
										{
											stack[top++] = cs;
											cs = 51;
											_goto_targ = 2;
											if (true) continue _goto;
										}
									}
								}
									break;
								case 11:
								// line 148 "JsonReader.rl"
								{
									if (debug) System.out.println("endArray");
									pop();
									{
										cs = stack[--top];
										_goto_targ = 2;
										if (true) continue _goto;
									}
								}
									break;
								// line 201 "JsonReader.java"
								}
							}
						}

					case 2:
						if (cs == 0) {
							_goto_targ = 5;
							continue _goto;
						}
						if (++p != pe) {
							_goto_targ = 1;
							continue _goto;
						}
					case 4:
						if (p == eof) {
							int __acts = _json_eof_actions[cs];
							int __nacts = (int)_json_actions[__acts++];
							while (__nacts-- > 0) {
								switch (_json_actions[__acts++]) {
								case 4:
								// line 109 "JsonReader.rl"
								{
									String value = new String(data, s, p - s);
									s = p;
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("number: " + name + "=" + Float.parseFloat(value));
									number(name, value);
								}
									break;
								case 5:
								// line 116 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("boolean: " + name + "=true");
									bool(name, true);
								}
									break;
								case 6:
								// line 121 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("boolean: " + name + "=false");
									bool(name, false);
								}
									break;
								case 7:
								// line 126 "JsonReader.rl"
								{
									String name = names.size > 0 ? names.pop() : null;
									if (debug) System.out.println("null: " + name);
									string(name, null);
								}
									break;
								// line 256 "JsonReader.java"
								}
							}
						}

					case 5:
					}
					break;
				}
			}

			// line 175 "JsonReader.rl"

		} catch (RuntimeException ex) {
			parseRuntimeEx = ex;
		}

		if (p < pe) {
			int lineNumber = 1;
			for (int i = 0; i < p; i++)
				if (data[i] == '\n') lineNumber++;
			throw new IllegalArgumentException("Error parsing JSON on line " + lineNumber + " near: " + new String(data, p, pe - p),
				parseRuntimeEx);
		} else if (elements.size != 0) {
			Object element = elements.peek();
			elements.clear();
			if (element instanceof ObjectMap)
				throw new IllegalArgumentException("Error parsing JSON, unmatched brace.");
			else
				throw new IllegalArgumentException("Error parsing JSON, unmatched bracket.");
		}
		Object root = this.root;
		this.root = null;
		return root;
	}

	// line 266 "JsonReader.java"
	private static byte[] init__json_actions_0 () {
		return new byte[] {0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 2, 0, 2, 2, 0, 3, 2, 4, 9,
			2, 4, 11, 2, 5, 9, 2, 5, 11, 2, 6, 9, 2, 6, 11, 2, 7, 9, 2, 7, 11};
	}

	private static final byte _json_actions[] = init__json_actions_0();

	private static short[] init__json_key_offsets_0 () {
		return new short[] {0, 0, 13, 15, 17, 26, 29, 31, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 55, 57, 61, 74, 76,
			78, 83, 87, 96, 99, 107, 109, 118, 122, 124, 131, 141, 142, 143, 144, 145, 150, 151, 152, 153, 158, 159, 160, 161, 166,
			175, 190, 192, 194, 199, 212, 215, 223, 225, 234, 238, 240, 247, 257, 258, 259, 260, 261, 266, 267, 268, 269, 274, 275,
			276, 277, 282, 291, 294, 300, 307, 312, 320, 323, 326, 329, 329};
	}

	private static final short _json_key_offsets[] = init__json_key_offsets_0();

	private static char[] init__json_trans_keys_0 () {
		return new char[] {32, 34, 45, 48, 91, 102, 110, 116, 123, 9, 13, 49, 57, 34, 92, 34, 92, 34, 47, 92, 98, 102, 110, 114,
			116, 117, 48, 49, 57, 48, 57, 43, 45, 48, 57, 48, 57, 97, 108, 115, 101, 117, 108, 108, 114, 117, 101, 32, 34, 44, 125,
			9, 13, 34, 92, 34, 92, 32, 58, 9, 13, 32, 34, 45, 48, 91, 102, 110, 116, 123, 9, 13, 49, 57, 34, 92, 34, 92, 32, 44,
			125, 9, 13, 32, 34, 9, 13, 34, 47, 92, 98, 102, 110, 114, 116, 117, 48, 49, 57, 32, 44, 46, 69, 101, 125, 9, 13, 48, 57,
			32, 44, 69, 101, 125, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 44, 125, 9, 13, 48, 57, 32, 44, 46, 69, 101, 125, 9,
			13, 48, 57, 97, 108, 115, 101, 32, 44, 125, 9, 13, 117, 108, 108, 32, 44, 125, 9, 13, 114, 117, 101, 32, 44, 125, 9, 13,
			34, 47, 92, 98, 102, 110, 114, 116, 117, 32, 34, 44, 45, 48, 91, 93, 102, 110, 116, 123, 9, 13, 49, 57, 34, 92, 34, 92,
			32, 44, 93, 9, 13, 32, 34, 45, 48, 91, 102, 110, 116, 123, 9, 13, 49, 57, 48, 49, 57, 32, 44, 46, 69, 93, 101, 9, 13,
			48, 57, 32, 44, 69, 93, 101, 9, 13, 48, 57, 43, 45, 48, 57, 48, 57, 32, 44, 93, 9, 13, 48, 57, 32, 44, 46, 69, 93, 101,
			9, 13, 48, 57, 97, 108, 115, 101, 32, 44, 93, 9, 13, 117, 108, 108, 32, 44, 93, 9, 13, 114, 117, 101, 32, 44, 93, 9, 13,
			34, 47, 92, 98, 102, 110, 114, 116, 117, 32, 9, 13, 32, 46, 69, 101, 9, 13, 32, 69, 101, 9, 13, 48, 57, 32, 9, 13, 48,
			57, 32, 46, 69, 101, 9, 13, 48, 57, 32, 9, 13, 32, 9, 13, 32, 9, 13, 0};
	}

	private static final char _json_trans_keys[] = init__json_trans_keys_0();

	private static byte[] init__json_single_lengths_0 () {
		return new byte[] {0, 9, 2, 2, 7, 1, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 2, 2, 9, 2, 2, 3, 2, 7, 1, 6, 0, 5, 2, 0,
			3, 6, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 7, 11, 2, 2, 3, 9, 1, 6, 0, 5, 2, 0, 3, 6, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1,
			1, 3, 7, 1, 4, 3, 1, 4, 1, 1, 1, 0, 0};
	}

	private static final byte _json_single_lengths[] = init__json_single_lengths_0();

	private static byte[] init__json_range_lengths_0 () {
		return new byte[] {0, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1,
			2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 0, 0, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
			0, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 0, 0};
	}

	private static final byte _json_range_lengths[] = init__json_range_lengths_0();

	private static short[] init__json_index_offsets_0 () {
		return new short[] {0, 0, 12, 15, 18, 27, 30, 32, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 64, 67, 70, 74, 86, 89,
			92, 97, 101, 110, 113, 121, 123, 131, 135, 137, 143, 152, 154, 156, 158, 160, 165, 167, 169, 171, 176, 178, 180, 182,
			187, 196, 210, 213, 216, 221, 233, 236, 244, 246, 254, 258, 260, 266, 275, 277, 279, 281, 283, 288, 290, 292, 294, 299,
			301, 303, 305, 310, 319, 322, 328, 334, 338, 345, 348, 351, 354, 355};
	}

	private static final short _json_index_offsets[] = init__json_index_offsets_0();

	private static byte[] init__json_trans_targs_0 () {
		return new byte[] {1, 2, 5, 79, 78, 9, 13, 16, 78, 1, 82, 0, 78, 4, 3, 78, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 79, 82, 0, 80,
			0, 8, 8, 81, 0, 81, 0, 10, 0, 11, 0, 12, 0, 83, 0, 14, 0, 15, 0, 84, 0, 17, 0, 18, 0, 85, 0, 19, 20, 27, 86, 19, 0, 22,
			50, 21, 22, 50, 21, 22, 23, 22, 0, 23, 24, 29, 30, 26, 37, 42, 46, 26, 23, 36, 0, 26, 28, 25, 26, 28, 25, 26, 27, 86,
			26, 0, 27, 20, 27, 0, 25, 25, 25, 25, 25, 25, 25, 25, 0, 30, 36, 0, 26, 27, 31, 33, 33, 86, 26, 0, 32, 0, 26, 27, 33,
			33, 86, 26, 32, 0, 34, 34, 35, 0, 35, 0, 26, 27, 86, 26, 35, 0, 26, 27, 31, 33, 33, 86, 26, 36, 0, 38, 0, 39, 0, 40, 0,
			41, 0, 26, 27, 86, 26, 0, 43, 0, 44, 0, 45, 0, 26, 27, 86, 26, 0, 47, 0, 48, 0, 49, 0, 26, 27, 86, 26, 0, 21, 21, 21,
			21, 21, 21, 21, 21, 0, 51, 52, 55, 56, 57, 54, 87, 64, 69, 73, 54, 51, 63, 0, 54, 77, 53, 54, 77, 53, 54, 55, 87, 54, 0,
			55, 52, 56, 57, 54, 64, 69, 73, 54, 55, 63, 0, 57, 63, 0, 54, 55, 58, 60, 87, 60, 54, 0, 59, 0, 54, 55, 60, 87, 60, 54,
			59, 0, 61, 61, 62, 0, 62, 0, 54, 55, 87, 54, 62, 0, 54, 55, 58, 60, 87, 60, 54, 63, 0, 65, 0, 66, 0, 67, 0, 68, 0, 54,
			55, 87, 54, 0, 70, 0, 71, 0, 72, 0, 54, 55, 87, 54, 0, 74, 0, 75, 0, 76, 0, 54, 55, 87, 54, 0, 53, 53, 53, 53, 53, 53,
			53, 53, 0, 78, 78, 0, 78, 6, 7, 7, 78, 0, 78, 7, 7, 78, 80, 0, 78, 78, 81, 0, 78, 6, 7, 7, 78, 82, 0, 78, 78, 0, 78, 78,
			0, 78, 78, 0, 0, 0, 0};
	}

	private static final byte _json_trans_targs[] = init__json_trans_targs_0();

	private static byte[] init__json_trans_actions_0 () {
		return new byte[] {0, 0, 1, 1, 21, 0, 0, 0, 17, 0, 1, 0, 28, 1, 1, 7, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 25, 1, 1, 5, 0, 0, 0, 0, 0,
			0, 0, 0, 1, 1, 21, 0, 0, 0, 17, 0, 1, 0, 28, 1, 1, 7, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0,
			0, 9, 9, 0, 0, 0, 31, 9, 0, 0, 0, 9, 9, 0, 0, 31, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 31, 9, 0, 0, 9, 9, 0, 0, 0, 31, 9, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 43, 13, 0, 0, 0, 0, 0, 0, 0, 15, 15, 49, 15, 0, 0, 0, 0, 0, 0, 0, 11, 11, 37, 11, 0,
			3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 1, 1, 21, 23, 0, 0, 0, 17, 0, 1, 0, 28, 1, 1, 7, 0, 0, 0, 0, 23, 0, 0, 0, 0, 1, 1,
			21, 0, 0, 0, 17, 0, 1, 0, 0, 0, 0, 9, 9, 0, 0, 34, 0, 9, 0, 0, 0, 9, 9, 0, 34, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 34,
			9, 0, 0, 9, 9, 0, 0, 34, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 46, 13, 0, 0, 0, 0, 0, 0, 0, 15, 15, 52, 15, 0, 0,
			0, 0, 0, 0, 0, 11, 11, 40, 11, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9, 9, 0, 0, 9,
			0, 0, 0, 9, 0, 0, 13, 13, 0, 15, 15, 0, 11, 11, 0, 0, 0, 0};
	}

	private static final byte _json_trans_actions[] = init__json_trans_actions_0();

	private static byte[] init__json_eof_actions_0 () {
		return new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 9, 9, 9, 9, 13, 15, 11, 0, 0};
	}

	private static final byte _json_eof_actions[] = init__json_eof_actions_0();

	static final int json_start = 1;
	static final int json_first_final = 78;
	static final int json_error = 0;

	static final int json_en_object = 19;
	static final int json_en_array = 51;
	static final int json_en_main = 1;

	// line 199 "JsonReader.rl"

	private final Array elements = new Array(8);
	private Object root, current;

	private void set (String name, Object value) {
		if (current instanceof ObjectMap)
			((ObjectMap)current).put(name, value);
		else if (current instanceof Array)
			((Array)current).add(value);
		else
			root = value;
	}

	protected void startObject (String name) {
		ObjectMap value = new ObjectMap();
		if (current != null) set(name, value);
		elements.add(value);
		current = value;
	}

	protected void startArray (String name) {
		Array value = new Array();
		if (current != null) set(name, value);
		elements.add(value);
		current = value;
	}

	protected void pop () {
		root = elements.pop();
		current = elements.size > 0 ? elements.peek() : null;
	}

	protected void string (String name, String value) {
		set(name, value);
	}

	protected void number (String name, String value) {
		set(name, value);
	}

	protected void bool (String name, boolean value) {
		set(name, String.valueOf(value));
	}

	private String unescape (String value) {
		int length = value.length();
		StringBuilder buffer = new StringBuilder(length + 16);
		for (int i = 0; i < length;) {
			char c = value.charAt(i++);
			if (c != '\\') {
				buffer.append(c);
				continue;
			}
			if (i == length) break;
			c = value.charAt(i++);
			if (c == 'u') {
				buffer.append(Character.toChars(Integer.parseInt(value.substring(i, i + 4), 16)));
				i += 4;
				continue;
			}
			switch (c) {
			case '"':
			case '\\':
			case '/':
				break;
			case 'b':
				c = '\b';
				break;
			case 'f':
				c = '\f';
				break;
			case 'n':
				c = '\n';
				break;
			case 'r':
				c = '\r';
				break;
			case 't':
				c = '\t';
				break;
			default:
				throw new SerializationException("Illegal escaped character: \\" + c);
			}
			buffer.append(c);
		}
		return buffer.toString();
	}
}
