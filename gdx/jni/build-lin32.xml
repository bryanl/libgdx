<!-- this can be used on 64-bit or 32-bit flavors of Lunix. Just install gcc and g++ multilibs for your compiler version -->
<project name="gdx-natives" basedir="." default="link">
	<!-- include the environment -->
	<property environment="env"/>	
	
	<!-- defined build directory where object files and shared lib will be placed in -->
	<property name="builddir" value="../linux"/>
	<property name="libname" value="libgdx.so"/>
	<property name="jni-platform" value="linux"/>
	
	<!-- define g++ compiler, options and files to compile -->
	<property name="g++" value="g++"/>
	<!-- should probably contain -fPic but we use gcc 4.4.1 to compile those binaries -->
	<property name="g++-opts" value="-c -Wall -O2 -mfpmath=sse -msse2 -DFIXED_POINT -fmessage-length=0 -m32 -fPIC"/>
	<fileset id="g++-files" dir="./">
		<include name="**/*.cpp"/>
		<exclude name="Mpg123Decoder.cpp"/>
		<exclude name="mpg123/**"/>
	</fileset>
	
	<!-- define gcc compiler, options and files to compile -->
	<property name="gcc" value="gcc"/>	
	<property name="gcc-opts" value="${g++-opts}"/>
	<fileset id="gcc-files" dir="./">		
		<include name="**/*.c"/>				
		<exclude name="mpg123/**"/>
	</fileset>

	<!-- define linker and options -->
	<property name="linker" value="g++"/>
	<property name="linker-opts" value="-shared -m32"/>
	
	<!-- cleans the build directory, removes all object files and shared libs -->
	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${builddir}" includes="**/*" excludes="**/.svn"/>
		</delete>
	</target>

	<!-- compiles all C and C++ files to object files in the build directory -->
	<target name="compile">
		<apply failonerror="true" executable="${g++}" dest="${builddir}" verbose="true">
			<arg line="${g++-opts}"/>
			<arg value="-I${env.JAVA_HOME}/include"/>
			<arg value="-I${env.JAVA_HOME}/include/${jni-platform}"/>
			<arg value="-I./"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="g++-files"/>
			<chainedmapper>
				<flattenmapper/>
				<mapper type="glob" from="*.cpp" to="*.o"/>
			</chainedmapper>
		</apply>
		<apply failonerror="true" executable="${gcc}" dest="${builddir}" verbose="true">
			<arg line="${gcc-opts}"/>
			<arg value="-I${env.JAVA_HOME}/include"/>
			<arg value="-I${env.JAVA_HOME}/include/${jni-platform}"/>
			<arg value="-I./"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="gcc-files"/>
			<chainedmapper>
				<flattenmapper/>
				<mapper type="glob" from="*.c" to="*.o"/>
			</chainedmapper>
		</apply>
	</target>	

	<!-- links the shared library based on the previously compiled object files -->
	<target name="link" depends="compile">
		<apply failonerror="true" executable="${linker}" parallel="true" dir="${builddir}">
			<arg line="${linker-opts}"/>
			<arg value="-o"/>
			<arg path="${builddir}/${libname}"/>		
			<fileset dir="${builddir}">
				<patternset>
					<include name="**/*.o"/>
				</patternset>
			</fileset>
		</apply>
	</target>
</project>
